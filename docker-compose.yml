version: "3"
services:
  php:
    deploy:
      resources:
        limits:
          memory: ${PHP_MEMORY_LIMITS}
          #cpus: 1
    build:
      args:
        user: ${USER}
        uid: ${USER_UID}
        home: ${CONTAINER_HOME}
      context: ./php
      dockerfile: ./Dockerfile
    container_name: php
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ${APP_DIR}:/var/www
      - ${TMP_DIR}:/tmp
      - ${HOME}:${CONTAINER_HOME}/
      - ./.bashrc_docker:${CONTAINER_HOME}/.bashrc_docker
    networks:
      - intranet

  php8:
    deploy:
      resources:
        limits:
          memory: ${PHP8_MEMORY_LIMITS}
          #cpus: 1
    build:
      args:
        user: ${USER}
        uid: ${USER_UID}
        home: ${CONTAINER_HOME}
      context: ./php8
      dockerfile: ./Dockerfile
    container_name: php8
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ${APP_DIR}:/var/www
      - ${TMP_DIR}:/tmp
      - ${HOME}:${CONTAINER_HOME}/
      - ./.bashrc_docker:${CONTAINER_HOME}/.bashrc_docker
    networks:
      - intranet

  mysql:
    image: mysql:8.0.23
    # to fix mbind: Operation not permitted
    cap_add:
      - SYS_NICE
    deploy:
      resources:
        limits:
          memory: ${MYSQL_MEMORY_LIMITS}
          #cpus: 2
    hostname: db.localhost
    container_name: mysql
    restart: unless-stopped
    user: ${USER_UID}:999
    environment:
      MYSQL_ROOT_HOST: "%"
      #MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      #MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    ports:
      - 127.0.0.1:${DB_PORT}:3306
    volumes:
      # directory
      - ./mysql/etc:/etc/mysql/conf.d
      - ${DATA_DIR}/mysql:/var/lib/mysql
      - ${DB_DUMP_DIR}:/var/lib/mysql-files
    networks:
      - intranet
    command: --user=mysql
             --explicit_defaults_for_timestamp=ON
             --character-set-server=utf8mb4
             --collation-server=utf8mb4_0900_ai_ci

  nginx:
    image: nginx:alpine
    deploy:
      resources:
        limits:
          memory: ${NGIX_MEMORY_LIMITS}
          #cpus: 1
    container_name: nginx
    restart: unless-stopped
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - ${APP_DIR}:/var/www
      - ${LOG_DIR}:/var/log/nginx
      - ./nginx/etc:/etc/nginx/conf.d/
    networks:
      - intranet

  redis:
    image: redis
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMITS}
          #cpus: 1
    hostname: redis
    container_name: redis
    command: --port ${REDIS_PORT}
    ports:
      - "127.0.0.1:${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - intranet

  meilisearch:
    image: getmeili/meilisearch:latest
    deploy:
      resources:
        limits:
          memory: ${MEILSEARCH_MEMORY_LIMITS}
    hostname: meilisearch
    container_name: meilisearch
    user: ${USER_UID}:${USER_UID}
    #restart: unless-stopped
    #command: ./meilisearch --master-key=${MEILISEARCH_KEY} --no-analytics
    command: ./meilisearch --no-analytics --http-payload-size-limit=500Mb
    ports:
      - "127.0.0.1:${MEILISEARCH_PORT}:${MEILISEARCH_PORT}"
    volumes:
      - ${MEILISEARCH_DATA}:/data.ms
    networks:
      - intranet

  swagger-editor:
    image: swaggerapi/swagger-editor
    hostname: swagger-editor
    container_name: "swagger-editor"
    ports:
      - "8081:8080"
    networks:
      - intranet

  swagger-ui:
    image: swaggerapi/swagger-ui
    hostname: swagger-ui
    container_name: "swagger-ui"
    ports:
      - "127.0.0.1:8082:8080"
    volumes:
      #- ./swagger/openapi.json:/openapi.json
      - ${SWAGGER_ROOT}/openapi.json:/openapi.json
    environment:
      SWAGGER_JSON: /openapi.json
      # API_URL: ""
    networks:
      - intranet

networks:
  intranet:
    driver: bridge
